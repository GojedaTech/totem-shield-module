#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define BASE 0
#define NUM  1
#define NSL  2
#define ADJ  3

&mt {
  /* tapping-term-ms = <170>; */
    quick-tap-ms = <250>;
    /* flavor = "hold-preferred"; */
  /* global-quick-tap; */
};

&lt {
    /* tapping-term-ms = <170>; */
    quick-tap-ms = <250>;
    /* flavor = "tap-preferred"; */
    /* global-quick-tap; */
    require-prior-idle-ms = <250>;
};

&sk {
    quick-release;
};

/ {
    behaviors {
       /*
        *
        */
        caps_tdr: caps_tap_dance_right {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&smt RSHFT RALT>, <&caps_word>;
        };

        caps_tdl: caps_tap_dance_left {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&slt 1 LSHFT>, <&caps_word>;
        };


       /*   Custom mod-tap/layer-tap behavior.
        *   The main idea is to accomodate
        *   the one-shot (i.e. sticky) mods.
        */
        slt: sticky_layer_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            require-prior-idle-ms = <250>;
            bindings = <&mo>, <&sk>;
            display-name = "Sticky-Layer-Tap";
        };

        smt: sticky_mod_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            bindings = <&kp>, <&sk>;
            display-name = "Sticky-Mod-Tap";
        };

       /*   CTRL -based behavior of what would normally be a plain SPACE.
        *   Implemented as nested mod-morphs. The main idea is that `space`
        *   and `comma` are among the most commonly typed characters; hence
        *   their optimized placement (again, not without some individual
        *   preferences).
        */
        spc_L1: rctl_space {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&lt 2 SPACE>, <&kp COMMA>;
            mods = <(MOD_RCTL)>;
        };

        spc_L0: lctl_space {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&spc_L1>, <&kp COLON>;
            mods = <(MOD_LCTL)>;
        };

       /*   Quasi-Shift behavior for certain keys.
        *   In the traditional QWERTY layout/keyboard proper,
        *   pairs of non-alphanumeric symbols seem to be tightly coupled
        *   with one another via Shift Mod Key (e.g. / and ? ).
        *   In ZMK, there could actually be an easier way to decouple them,
        *   and, as such, this schema is also subject to revision.
        */
        s_minus: shift_minus {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp MINUS>, <&kp PLUS>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        s_dot: shift_dot {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp GT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        s_slash: shift_slash {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp FSLH>, <&kp LT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        s_quote: shift_quotes {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp APOS>, <&kp DQT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

       /*
        *
        *
        */
        mm_ctrl_bspc: ctrl_bspc {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&mt RCTRL BSPC>, <&kp BSPC>;
            mods = <MOD_LCTL>;
            keep-mods = <MOD_LCTL>;
        };

    };

    macros {
       /*   Easier navigation macros.  */
        four_down: four_down_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap &kp DOWN &kp DOWN &kp DOWN &kp DOWN>;
        };

        four_up: four_up_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap &kp UP &kp UP &kp UP &kp UP>;
        };

        eight_down: eight_down_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap &kp N8 &kp DOWN>;
        };

        eight_up: eight_up_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap &kp N8 &kp UP>;
        };
    };

/* ---------------------------------------------------------------------------------------------------------------------------------------------------- 
              ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓   ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓
              ┃     q     ┃     w     ┃     e     ┃     r     ┃    t      ┃   ┃     y     ┃     u     ┃     i     ┃     o     ┃     p     ┃
              ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫
              ┃     a     ┃     s     ┃     d     ┃     f     ┃    g      ┃   ┃     h     ┃     j     ┃     k     ┃     l     ┃     ;     ┃
  ┏━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┓
  ┃   LCTRL   ┃     z     ┃     x     ┃     c     ┃     v     ┃    b      ┃   ┃     n     ┃     m     ┃     ,     ┃     .     ┃     /     ┃   layer   ┃
  ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛
                                      ┃           ┃           ┃           ┃   ┃           ┃           ┃           ┃
                                      ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛   ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛
*/
    keymap {
        compatible = "zmk,keymap 
        base_layer {
            label= "BASE";
            bindings = <
                  &kp Q     &kp W       &kp E         &kp R         &kp T       &kp Y          &kp U           &kp I      &kp O   &kp P
                  &kp A     &kp S       &kp D         &kp F         &kp G       &kp H          &kp J           &kp K      &kp L   &kp SEMI
    &gresc        &kp Z     &kp X       &kp C         &kp V         &kp B       &kp N          &kp M           &kp COMMA  &kp DOT &kp FSLH  &lt 1 RET
                                        &kp LCTRL   &kp LEFT_COMMAND        &kp RSHFT     &kp SPACE  &kp BSPC       &mt RET TAB
            >;
        };
/* ---------------------------------------------------------------------------------------------------------------------------------------------------- */
        nav_layer {
            label= "NUM";
            bindings = <
                &kp N1     &kp  N2     &kp N3       &kp N4      &kp N5          &kp N6     &kp  N7      &kp N8      &kp N9      &kp N0
                &trans     &kp LEFT    &kp UP       &kp RIGHT   &mt LPAR LBKT   &mt RPAR RBKT &trans    &trans      &trans      &trans
    &trans      &trans     &trans      &DOWN        &trans      &mt MINUS UNDER &kp HASH     &trans     &trans      &trans      &trans     &trans
                                       &trans       &trans      &trans          &trans     &trans       &trans
            >;
        };
/* ---------------------------------------------------------------------------------------------------------------------------------------------------- */
        num_sym_layer {
            label= "NSL";
            bindings = <
                &kp HASH    &kp LBKT    &kp RBKT     &kp PIPE    &kp BSLH        &kp PRCNT   &kp N7      &kp N8      &kp N9     &kp ASTRK
                &kp AT      &kp LPAR    &kp RPAR     &kp AMPS    &kp GRAVE       &kp UNDER   &kp N4      &kp N5      &kp N6     &kp EQUAL
    &kp SEMI    &kp CARET   &kp LBRC    &kp RBRC     &kp DOLLAR  &kp TILDE       &kp EXCL    &kp N1      &kp N2      &kp N3     &kp N0      &kp QMARK
                                        &trans       &trans      &trans          &kp BSPC    &trans      &trans
            >;
        };
/* ---------------------------------------------------------------------------------------------------------------------------------------------------- */
        adjust_layer {
            label= "ADJ";
            bindings = <
                &sys_reset   &trans     &trans       &trans      &trans          &trans      &trans      &trans       &trans      &trans
                &bootloader  &trans     &trans       &trans      &trans          &bt BT_NXT  &trans      &trans       &trans      &trans
    &bt BT_CLR  &out OUT_TOG &trans     &trans       &trans      &trans          &bt BT_PRV  &trans      &trans       &trans      &trans    &trans
                                        &trans       &trans      &trans          &trans      &trans      &trans
            >;
        };
    };
};
